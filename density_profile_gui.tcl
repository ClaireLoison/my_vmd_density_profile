#!/usr/bin/env wish
# density_profile_gui.tcl --
#
# UI generated by GUI Builder Build 146 on 2012-12-13 15:23:06 from:
#    /home/toni/compile/vmd-utils/vmd_density_profile/density_profile_gui.ui
# This file is auto-generated.  Only the code within
#    '# BEGIN USER CODE'
#    '# END USER CODE'
# and code inside the callback subroutines will be round-tripped.
# The proc names 'ui' and 'init' are reserved.
#

package require Tk 8.4

# Declare the namespace for this dialog
namespace eval density_profile_gui {}

# Source the ui file, which must exist
set density_profile_gui::SCRIPTDIR [file dirname [info script]]
source [file join $density_profile_gui::SCRIPTDIR density_profile_gui_ui.tcl]

# BEGIN USER CODE
package provide density_profile_gui 0.3

# VMD-specific stuff. If invoked from VMD, load the backed functions
# (in package density_profile) and setup some defaults.
set density_profile_gui::in_vmd [string length [info proc vmd_install_extension]]
if { $density_profile_gui::in_vmd } {
    vmd_install_extension density_profile density_profile_gui::density_profile_tk "Analysis/Density Profile Tool"
    package require density_profile
}

# Called right upon menu action
proc density_profile_gui::density_profile_tk {} {
#    puts "In density_profile_tk"
    variable density_profile_window

    if { [winfo exists .density_profile] } {
	wm deiconify $density_profile_window
    } else {
	set density_profile_window [ toplevel ".density_profile" ]
	wm title $density_profile_window "Density Profile Tool"
	density_profile_gui::ui $density_profile_window; # density_profile_gui::init is now obsolete
    }
    return $density_profile_window
}



# Return the unit to show on the vertical axis
proc density_profile_gui::get_ylabel {} {
    variable target
    array set ylabel {atoms atoms   mass uma  charge e  electrons el}
    return $ylabel($target)
}


# Ugly mixture of computation and display REFACTOR
proc density_profile_gui::do_plot {} {
    variable selection
    variable axis
    variable resolution
    variable area

    # Make sure pbcs are set or warn
    set area [assertpbc]
    if { $area == -1 } { 	
	set answer [ tk_messageBox -icon question -message "No periodic cell information. Will compute linear densities instead of volume densities. Continue?" -type okcancel ]
	switch -- $answer {
	    ok { set area 1 }
	    cancel { error "Cancelled" }
	}
    } elseif { $area == -2 } {
	tk_messageBox -icon error -message "Only orthorombic cells are supported" -title Error
	error "Only orthorombic cells are supported"
    }

    
    array set hist [compute]

    # Now behavior depends whether averaging or not
    do_plot_all [array get hist]
}




# fill histogram keys so that there is one integer bin per each value
# between mi and max REFACTOR
proc density_profile_gui::do_plot_all arr {
    variable resolution
    variable frame_average
    variable area
    array set inp $arr

    lassign [get_keys_range [array names inp]] fmin fmax xmin xmax
    puts "Plot range $fmin..$fmax, bins $xmin..$xmax"

    set nframes [expr $fmax-$fmin+1]
    set nbins [expr $xmax-$xmin+1]

    # Y axis label
    set ylabel [get_ylabel]
    if {$area == 1} { set ylabel "$ylabel/\uc5" } \
	else { set ylabel "$ylabel/\uc5\ub3" }


    # bin centers
    set bclist {}
    for {set x $xmin} {$x<=$xmax} {incr x} {
	lappend bclist [expr ($x+.5)*$resolution]
    }
    
    # do plot FIXME BROKEN IF FRAME STEP > 1!!!
    if {$frame_average} {
	set avg {}
	set std {}
	# Iterate over bins first, for each 
	for {set x $xmin} {$x<=$xmax} {incr x} {
	    # Average and std over frames
	    set tmp {}
	    for {set f $fmin} {$f<=$fmax} {incr f} {
		lappend tmp $inp($f,$x)
	    }
	    lappend avg [vecmean $tmp]
	    lappend std [vecstddev $tmp]
	}
	set avgpstd [vecadd $avg $std]
	set avgmstd [vecsub $avg $std]
	
	set ph [multiplot -x $bclist -y $avg  -ylabel $ylabel  -title "Average density profile"\
		    -marker point -radius 2  -fillcolor "#ff0000" -color "#ff0000"  ]
	$ph add $bclist $avgpstd -dash "," -linecolor  "#000000"
	$ph add $bclist $avgmstd -dash "," -linecolor  "#000000"
	$ph replot
    } else {
	
	# Iterate over frames, build a vector, plot it
	set ph [multiplot -title "Density profiles" -ylabel $ylabel ]
	for {set f $fmin} {$f<=$fmax} {incr f} {
	    set tmp {}
	    for {set x $xmin} {$x<=$xmax} {incr x} {
	    # Average and std over frames
		lappend tmp $inp($f,$x)
	    }
	    $ph add $bclist $tmp  -linecolor  "#000000"
	}
	$ph replot
    }

}
# END USER CODE

# BEGIN CALLBACK CODE
# ONLY EDIT CODE INSIDE THE PROCS.

# density_profile_gui::_button_3_command --
#
# Callback to handle _button_3 widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_button_3_command args {}

# density_profile_gui::_checkbutton_1_command --
#
# Callback to handle _checkbutton_1 widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_checkbutton_1_command args {}

# density_profile_gui::_checkbutton_2_command --
#
# Callback to handle _checkbutton_2 widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_checkbutton_2_command args {}

# density_profile_gui::_entry_1_invalidcommand --
#
# Callback to handle _entry_1 widget option -invalidcommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_1_invalidcommand args {}

# density_profile_gui::_entry_1_validatecommand --
#
# Callback to handle _entry_1 widget option -validatecommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_1_validatecommand args {}

# density_profile_gui::_entry_1_xscrollcommand --
#
# Callback to handle _entry_1 widget option -xscrollcommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_1_xscrollcommand args {}

# density_profile_gui::_entry_2_invalidcommand --
#
# Callback to handle _entry_2 widget option -invalidcommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_2_invalidcommand args {}

# density_profile_gui::_entry_2_validatecommand --
#
# Callback to handle _entry_2 widget option -validatecommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_2_validatecommand args {}

# density_profile_gui::_entry_2_xscrollcommand --
#
# Callback to handle _entry_2 widget option -xscrollcommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_2_xscrollcommand args {}

# density_profile_gui::_entry_3_invalidcommand --
#
# Callback to handle _entry_3 widget option -invalidcommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_3_invalidcommand args {}

# density_profile_gui::_entry_3_validatecommand --
#
# Callback to handle _entry_3 widget option -validatecommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_3_validatecommand args {}

# density_profile_gui::_entry_3_xscrollcommand --
#
# Callback to handle _entry_3 widget option -xscrollcommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_3_xscrollcommand args {}

# density_profile_gui::_entry_4_invalidcommand --
#
# Callback to handle _entry_4 widget option -invalidcommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_4_invalidcommand args {}

# density_profile_gui::_entry_4_validatecommand --
#
# Callback to handle _entry_4 widget option -validatecommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_4_validatecommand args {}

# density_profile_gui::_entry_4_xscrollcommand --
#
# Callback to handle _entry_4 widget option -xscrollcommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_4_xscrollcommand args {}

# density_profile_gui::_entry_5_invalidcommand --
#
# Callback to handle _entry_5 widget option -invalidcommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_5_invalidcommand args {}

# density_profile_gui::_entry_5_validatecommand --
#
# Callback to handle _entry_5 widget option -validatecommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_5_validatecommand args {}

# density_profile_gui::_entry_5_xscrollcommand --
#
# Callback to handle _entry_5 widget option -xscrollcommand
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_entry_5_xscrollcommand args {}

# density_profile_gui::_radiobutton_1_command --
#
# Callback to handle _radiobutton_1 widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_radiobutton_1_command args {}

# density_profile_gui::_radiobutton_2_command --
#
# Callback to handle _radiobutton_2 widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_radiobutton_2_command args {}

# density_profile_gui::_radiobutton_3_command --
#
# Callback to handle _radiobutton_3 widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_radiobutton_3_command args {}

# density_profile_gui::_radiobutton_4_command --
#
# Callback to handle _radiobutton_4 widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_radiobutton_4_command args {}

# density_profile_gui::_radiobutton_5_command --
#
# Callback to handle _radiobutton_5 widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_radiobutton_5_command args {}

# density_profile_gui::_radiobutton_6_command --
#
# Callback to handle _radiobutton_6 widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_radiobutton_6_command args {}

# density_profile_gui::_radiobutton_7_command --
#
# Callback to handle _radiobutton_7 widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_radiobutton_7_command args {}

# density_profile_gui::_radiobutton_9_command --
#
# Callback to handle _radiobutton_9 widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_radiobutton_9_command args {}

# density_profile_gui::_radiobutton_10_command --
#
# Callback to handle _radiobutton_10 widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_radiobutton_10_command args {}

# density_profile_gui::_radiobutton_11_command --
#
# Callback to handle _radiobutton_11 widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::_radiobutton_11_command args {}

# density_profile_gui::close_command --
#
# Callback to handle close widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::close_command args {
    wm withdraw .density_profile
}

# density_profile_gui::plot_command --
#
# Callback to handle plot widget option -command
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::plot_command args {
    do_plot
}

# density_profile_gui::help_command --
#
# Legacy command found in callback code. Add user comments inside body.
#
# ARGS:
#    <NONE>
#
proc density_profile_gui::help_command args {
    vmd_open_url http://multiscalelab.org/utilities/DensityProfileTool
}

# END CALLBACK CODE

# density_profile_gui::init --
#
#   Call the optional userinit and initialize the dialog.
#   DO NOT EDIT THIS PROCEDURE.
#
# Arguments:
#   root   the root window to load this dialog into
#
# Results:
#   dialog will be created, or a background error will be thrown
#
proc density_profile_gui::init {root args} {
    # Catch this in case the user didn't define it
    catch {density_profile_gui::userinit}
    if {[info exists embed_args]} {
	# we are running in the plugin
	density_profile_gui::ui $root
    } elseif {$::argv0 == [info script]} {
	# we are running in stand-alone mode
	wm title $root density_profile_gui
	if {[catch {
	    # Create the UI
	    density_profile_gui::ui  $root
	} err]} {
	    bgerror $err ; exit 1
	}
    }
    catch {density_profile_gui::run $root}
}
density_profile_gui::init .

